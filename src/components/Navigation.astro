---
import { Icon } from 'astro-icon';
import Link from './Link.astro';
import navData from '../data/navData';
---

<button
  class="mobile-nav-toggle"
  id="menu-toggle"
  aria-controls="primary-navigation"
  aria-expanded="false"
>
  <span class="sr-only">Menu</span>

  <Icon name="mdi:menu" width="50" />
</button>

<nav aria-label="Primary">
  <ul id="primary-navigation" data-visible="false">
    {navData.map((item) =>
      <li><Link text={item.name} href={item.path} style="primary" isFilled={false} data-navLink /></li>
    )}
    <div class="animation start-home"></div>
  </ul>
</nav>

<style lang="scss">
  .navigation {
  }

  ul {
    display: flex;
    gap: var(--gap, 1em);

    list-style: none;
    // padding: 0;
    // margin: 0;

    @media (max-width: 700px) {
      --gap: 2em;
      position: fixed;
      inset: 0 0 0 30%;
      flex-direction: column;
      padding: min(30vh, 10rem) 2em;
      background: hsl(0, 0%, 0%, 0.5);
      z-index: 1000;

      transform: translateX(100%);
      transition: transform 350ms ease-out;

      @supports (backdrop-filter: blur(1rem)) {
        background: hsl(0, 0%, 100%, 0.1);
        backdrop-filter: blur(1rem);
      }
    }

    @media (max-width: 700px) {
      --gap: clamp(1.5rem, 5vw, 3rem);
      // padding-block: 22rem;
      padding-inline: clamp(3rem, 7vw, 10rem);
    }

    &[data-visible='true'] {
      @media (max-width: 700px) {
        transform: translateX(0%);
      }
    }
  }

  li {
    // & :is(:hover, :focus) {
    //   background: #ffffff;
    //   box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
    //   border-radius: 4px;
    //   color: #0076d6;
    // }
  }
  .mobile-nav-toggle {
    display: none;

    padding: 1em;

    @media (max-width: 700px) {
      display: block;
      position: absolute;
      aspect-ratio: 1;
      right: 2rem;

      border: none;
      border-radius: 0;
      background: transparent;
      color: #fff;
      cursor: pointer;
      display: inline-block;
      padding: 1em 1.5em;
      text-transform: uppercase;
      transition: all 0.25s ease-in-out;
      z-index: 9999;
    }

    &:focus {
      outline: none;
    }
    &.opened {
      .mobile-nav-toggle__svg {
        .line-1 {
          transform: rotate(45deg) translateY(0) translateX(0);
        }
        .line-2 {
          opacity: 0;
        }
        .line-3 {
          transform: rotate(-45deg) translateY(0em) translateX(0em);
        }
      }
    }

    &__icon {
      display: inline-block;
      fill: currentColor;
      vertical-align: middle;
      position: relative;
      top: -0.0625em;
      width: 2em;
      height: 2em;
      top: 0;
    }
  }

  .mobile-nav-toggle__svg {
    .line {
      opacity: 1;
      transform: rotate(0) translateY(0) translateX(0);
      transform-origin: 1em 1em;
      transition: transform 0.3s ease-in-out, opacity 0.2s ease-in-out;
    }
    .line-1 {
      transform-origin: 1em 2.5em;
    }
    .line-3 {
      transform-origin: 1em 4.5em;
    }
  }
</style>

<script>
  const primaryNav = document.querySelector('ul') as HTMLElement;
  const navToggle = document.getElementById('menu-toggle') as HTMLElement;

  navToggle.addEventListener('click', () => {
    const visibility = primaryNav.getAttribute('data-visible');

    if (visibility === 'false') {
      primaryNav.setAttribute('data-visible', true);
      navToggle.setAttribute('aria-expanded', true);
    } else {
      primaryNav.setAttribute('data-visible', false);
      navToggle.setAttribute('aria-expanded', false);
    }

    // Toggle class "opened". Set also aria-expanded to true or false.
    if (-1 !== navToggle.className.indexOf('opened')) {
      navToggle.className = navToggle.className.replace(' opened', '');
      navToggle.setAttribute('aria-expanded', 'false');
    } else {
      navToggle.className += ' opened';
      navToggle.setAttribute('aria-expanded', 'true');
    }
  });

  const setGlowEffectRx = () => {
    const glowEffects = document.querySelectorAll('.glow');

    glowEffects.forEach(glowEffect => {
      const glowLines = glowEffect.querySelectorAll('rect');
      const rx = getComputedStyle(glowEffect, '::after').borderRadius;

      //NOTE setup for any added JS micro interactions.
      // glowEffect.addEventListener('click', () => {

      // });

      glowLines.forEach(line => {
        line.setAttribute('rx', rx);
      });
    });
  };

  setGlowEffectRx();
</script>
