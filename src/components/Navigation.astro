<button
  class="mobile-nav-toggle"
  id="menu-toggle"
  aria-controls="primary-navigation"
  aria-expanded="false"
>
  <span class="sr-only">Menu</span>

  <svg
    class="mobile-nav-toggle__icon"
    aria-hidden="true"
    version="1.1"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    x="0px"
    y="0px"
    viewBox="0 0 100 100"
  >
    <g class="mobile-nav-toggle__svg">
      <path class="line line-1" d="M5 13h90v14H5z"></path>
      <path class="line line-2" d="M5 43h90v14H5z"></path>
      <path class="line line-3" d="M5 73h90v14H5z"></path>
    </g>
  </svg>
</button>

<nav class="navigation">
  <ul class="navigation__list" id="primary-navigation" data-visible="false">
    <li class="navigation__item">
      <a href="#" class="navigation__link glow">
        <svg class="glow--container">
          <rect pathLength="100" stroke-linecap="round" class="glow--blur"
          ></rect>
          <rect pathLength="100" stroke-linecap="round" class="glow--line"
          ></rect></svg
        >Home</a
      >
    </li>
    <li class="navigation__item">
      <a href="#" class="navigation__link glow">
        <svg class="glow--container">
          <rect pathLength="100" stroke-linecap="round" class="glow--blur"
          ></rect>
          <rect pathLength="100" stroke-linecap="round" class="glow--line"
          ></rect></svg
        >Products</a
      >
    </li>
    <li class="navigation__item">
      <a href="#" class="navigation__link glow">
        <svg class="glow--container">
          <rect pathLength="100" stroke-linecap="round" class="glow--blur"
          ></rect>
          <rect pathLength="100" stroke-linecap="round" class="glow--line"
          ></rect></svg
        >Services</a
      >
    </li>
    <li class="navigation__item">
      <a href="#" class="navigation__link glow">
        <svg class="glow--container">
          <rect pathLength="100" stroke-linecap="round" class="glow--blur"
          ></rect>
          <rect pathLength="100" stroke-linecap="round" class="glow--line"
          ></rect></svg
        >News</a
      >
    </li>
    <li class="navigation__item">
      <a href="#" class="navigation__link glow">
        <svg class="glow--container">
          <rect pathLength="100" stroke-linecap="round" class="glow--blur"
          ></rect>
          <rect pathLength="100" stroke-linecap="round" class="glow--line"
          ></rect></svg
        >About</a
      >
    </li>
    <li class="navigation__item">
      <a href="#" class="navigation__link glow">
        <svg class="glow--container">
          <rect pathLength="100" stroke-linecap="round" class="glow--blur"
          ></rect>
          <rect pathLength="100" stroke-linecap="round" class="glow--line"
          ></rect></svg
        >Contact</a
      >
    </li>
    <div class="animation start-home"></div>
  </ul>
</nav>

<style lang="scss">
  .navigation {
    &__list {
      display: flex;
      gap: var(--gap, 1em);

      list-style: none;
      // padding: 0;
      // margin: 0;

      @media (max-width: 700px) {
        --gap: 2em;
        position: fixed;
        inset: 0 0 0 30%;
        flex-direction: column;
        padding: min(30vh, 10rem) 2em;
        background: hsl(0, 0%, 0%, 0.5);
        z-index: 1000;

        transform: translateX(100%);
        transition: transform 350ms ease-out;

        @supports (backdrop-filter: blur(1rem)) {
          background: hsl(0, 0%, 100%, 0.1);
          backdrop-filter: blur(1rem);
        }
      }

      @media (max-width: 700px) {
        --gap: clamp(1.5rem, 5vw, 3rem);
        // padding-block: 22rem;
        padding-inline: clamp(3rem, 7vw, 10rem);
      }

      &[data-visible='true'] {
        @media (max-width: 700px) {
          transform: translateX(0%);
        }
      }
    }

    &__item {
      // & :is(:hover, :focus) {
      //   background: #ffffff;
      //   box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
      //   border-radius: 4px;
      //   color: #0076d6;
      // }
    }

    &__link {
      text-decoration: none;
      color: white;
      padding: 1em;

      font-weight: 700;
      font-size: 1.8rem;

      outline: none;

      @media (max-width: 900px) {
        padding: 0.8em;
      }

      position: relative;
      z-index: 1;

      &:is(:hover, :focus) {
        color: blue;
        transition: color 25ms ease-in;

        // background-color: white;
        // border-radius: 8px;
      }

      &::after {
        content: '';
        position: absolute;
        left: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        background-color: white;
        z-index: -1;
        border-radius: 8px;

        transform: scaleX(0);
        // transform-origin: right;
        transition: transform 20ms ease-in;
      }

      &:is(:hover, :focus)::after {
        transform: scaleX(1);
        // transform-origin: left;
        // animation: scale-up-ver-center 100ms cubic-bezier(0.39, 0.575, 0.565, 1)
        //   both;

        animation: scale-up-center 100ms cubic-bezier(0.39, 0.575, 0.565, 1)
          both;
      }
    }
  }

  .mobile-nav-toggle {
    display: none;

    padding: 1em;

    @media (max-width: 700px) {
      display: block;
      position: absolute;
      aspect-ratio: 1;
      right: 2rem;

      border: none;
      border-radius: 0;
      background: transparent;
      color: #fff;
      cursor: pointer;
      display: inline-block;
      padding: 1em 1.5em;
      text-transform: uppercase;
      transition: all 0.25s ease-in-out;
      z-index: 9999;
    }

    &:focus {
      outline: none;
    }
    &.opened {
      .mobile-nav-toggle__svg {
        .line-1 {
          transform: rotate(45deg) translateY(0) translateX(0);
        }
        .line-2 {
          opacity: 0;
        }
        .line-3 {
          transform: rotate(-45deg) translateY(0em) translateX(0em);
        }
      }
    }

    &__icon {
      display: inline-block;
      fill: currentColor;
      vertical-align: middle;
      position: relative;
      top: -0.0625em;
      width: 2em;
      height: 2em;
      top: 0;
    }
  }
  .mobile-nav-toggle__svg {
    .line {
      opacity: 1;
      transform: rotate(0) translateY(0) translateX(0);
      transform-origin: 1em 1em;
      transition: transform 0.3s ease-in-out, opacity 0.2s ease-in-out;
    }
    .line-1 {
      transform-origin: 1em 2.5em;
    }
    .line-3 {
      transform-origin: 1em 4.5em;
    }
  }

  @keyframes scale-up-ver-center {
    0% {
      transform: scaleY(0.2);
    }
    100% {
      transform: scaleY(1);
    }
  }

  @keyframes scale-up-center {
    0% {
      transform: scale(0.5);
    }
    100% {
      transform: scale(1);
    }
  }

  .glow {
    --glow-line-color: #000;
    --glow-line-thickness: 1px;
    --glow-line-length: 90px;
    --glow-blur-color: #fff;
    --glow-blur-size: 3px;
    --glow-offset: 3px;
    --animation-speed: 800ms;
    /* do not change, used for calculations */
    --container-offset: 100px;
    position: relative;

    // &:is(:hover, :focus) :is(.glow--line, .glow--blur) {
    //   stroke-dashoffset: -80px;
    //   transition: stroke-dashoffset var(--animation-speed) ease-in;
    // }

    // &:is(:hover, :focus) .glow--container {
    //   animation: glow-visibility ease-in-out var(--animation-speed);
    // }

    &:is(:active) :is(.glow--line, .glow--blur) {
      stroke-dashoffset: -80px;
      transition: stroke-dashoffset var(--animation-speed) ease-in;
    }

    &:is(:active) .glow--container {
      animation: glow-visibility ease-in-out var(--animation-speed);
    }

    &--container {
      pointer-events: none;
      position: absolute;
      inset: calc(var(--container-offset) / -2);
      width: calc(100% + var(--container-offset));
      height: calc(100% + var(--container-offset));
      opacity: 0;
    }

    &--blur {
      width: calc(100% - var(--container-offset) + var(--glow-offset));
      height: calc(100% - var(--container-offset) + var(--glow-offset));
      x: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
      y: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
      // rx: 8px;
      fill: transparent;
      filter: blur(var(--glow-blur-size));
      stroke: var(--glow-blur-color);
      stroke-width: var(--glow-blur-size);
      stroke-dasharray: var(--glow-line-length)
        calc(50px - var(--glow-line-length));
    }

    &--line {
      width: calc(100% - var(--container-offset) + var(--glow-offset));
      height: calc(100% - var(--container-offset) + var(--glow-offset));
      x: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
      y: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
      // rx: 8px;
      fill: transparent;
      stroke: var(--glow-line-color);
      stroke-width: var(--glow-line-thickness);
      stroke-dasharray: 20px 30px;
      transition: stroke-dashoffset 500ms;
    }
  }

  @keyframes glow-visibility {
    0%,
    100% {
      opacity: 0;
    }

    75% {
      opacity: 1;
    }
  }


  .sr-only {
    display: none;
  }
</style>

<script>
  const primaryNav = document.querySelector('.navigation__list') as HTMLElement;
  const navToggle = document.getElementById('menu-toggle') as HTMLElement;

  navToggle.addEventListener('click', () => {
    const visibility = primaryNav.getAttribute('data-visible');

    if (visibility === 'false') {
      primaryNav.setAttribute('data-visible', true);
      navToggle.setAttribute('aria-expanded', true);
    } else {
      primaryNav.setAttribute('data-visible', false);
      navToggle.setAttribute('aria-expanded', false);
    }

    // Toggle class "opened". Set also aria-expanded to true or false.
    if (-1 !== navToggle.className.indexOf('opened')) {
      navToggle.className = navToggle.className.replace(' opened', '');
      navToggle.setAttribute('aria-expanded', 'false');
    } else {
      navToggle.className += ' opened';
      navToggle.setAttribute('aria-expanded', 'true');
    }
  });

  const setGlowEffectRx = () => {
    const glowEffects = document.querySelectorAll('.glow');

    glowEffects.forEach(glowEffect => {
      const glowLines = glowEffect.querySelectorAll('rect');
      const rx = getComputedStyle(glowEffect, '::after').borderRadius;

      //NOTE setup for any added JS micro interactions.
      // glowEffect.addEventListener('click', () => {

      // });

      glowLines.forEach(line => {
        line.setAttribute('rx', rx);
      });
    });
  };

  setGlowEffectRx();
</script>
